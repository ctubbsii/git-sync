#! /usr/bin/env bash
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# git-sync
# https://github.com/ctubbsii/git-sync
function git_sync_version() {
  echo '1.1.0'
}

function usage() {
  echo "Usage: git sync [-V | --version | -v | --verbose]"
}

set -e
finishedUpdates=('HEAD')

# check if running in a color terminal
function terminalSupportsColor() {
  local c; c=$(tput colors 2>/dev/null) || c=-1
  [[ -t 1 ]] && [[ $c -ge 8 ]]
}
terminalSupportsColor && doColor=1 || doColor=0

function color() { local c; c=$1; shift; [[ $doColor -eq 1 ]] && echo -e "\\e[0;${c}m${*}\\e[0m" || echo "$@"; }
function red() { color 31 "$@"; }
function green() { color 32 "$@"; }
function yellow() { color 33 "$@"; }

function ifDone() {
  local x b=$1 isDone=1
  for x in "${finishedUpdates[@]}"; do
    [[ $x == "$b" ]] && isDone=0 && break
  done
  finishedUpdates+=("$b")
  return $isDone
}

function updateWorktrees() {
  local worktrees w b r t
  #IFS=$'\n' worktrees=($(git worktree list --porcelain | grep ^worktree | cut -c10-))
  mapfile -t worktrees < <(git worktree list --porcelain | grep ^worktree | cut -c10-)
  for w in "${worktrees[@]}"; do
    b=$(cd "$w" && git rev-parse --abbrev-ref HEAD)

    [[ $b == 'HEAD' ]] && echo "Skipping $(red "$w"): no remote tracking branch for worktree"
    ifDone "$b" && continue

    if [[ -n $(cd "$w" && git status --porcelain --ignored=no) ]]; then
      echo "Skipping $(red "$b"): workspace dirty at $(yellow "$w")"
    else
      r=$(git config "branch.$b.remote")
      t=$(git config "branch.$b.merge" | cut -f3- -d/)
      if [[ -z $t ]]; then
        echo "Skipping $(red "$b"): no remote tracking branch"
      else
        if ! git show-branch remotes/"$r/$t" &>/dev/null; then
          echo "Skipping $(red "$b"): remote branch $(yellow "$r/$t") gone"
        else
          if [[ $(cd "$w" && git rev-parse HEAD) == "$(git rev-parse "$r/$t")" ]]; then
            [[ $GIT_SYNC_VERBOSE -eq 1 ]] && echo "Skipping $(green "$b") ($(yellow "$w")): already up-to-date"
            continue
          else
            echo "Updating $(green "$b") ($(yellow "$w")) ..."
            (cd "$w" && git merge --ff-only "$r/$t")
          fi
        fi
      fi
    fi
  done
}

function updateOthers() {
  local b r t
  # for each branch with a remote tracking branch
  for b in $(git config  --get-regexp '^branch[.][^ ]*[.]merge$' | awk '{print $1}'); do
    # strip out branch name
    b=${b#branch.}
    b=${b%.merge}

    ifDone "$b" && continue

    # get remote and tracking branch
    r=$(git config "branch.$b.remote")
    t=$(git config "branch.$b.merge" | cut -f3- -d/)
    if ! git show-branch "remotes/$r/$t" &>/dev/null; then
      echo "Skipping $(red "$b"): remote branch $(yellow "$r/$t") gone"
    else
      if [[ $(git rev-parse "$b") == "$(git rev-parse "remotes/$r/$t")" ]]; then
        [[ $GIT_SYNC_VERBOSE -eq 1 ]] && echo "Skipping $(green "$b"): already up-to-date"
        continue
      else
        echo "Updating $(green "$b") ..."
        git fetch . "remotes/$r/$t:$b"
      fi
    fi
  done
}

function git_sync_update() {
  if [[ $GIT_SYNC_VERBOSE -eq 1 ]]; then
    git remote update --prune
  else
    git remote update --prune 1>/dev/null
  fi
  # update checked out branches first, then the rest
  updateWorktrees
  updateOthers
  if [[ $GIT_SYNC_VERBOSE -eq 1 ]]; then
    git branch -vv
  fi
}

function git_sync_main() {
  if [[ ${#@} -gt 1 ]]; then
    usage
    return 1
  elif [[ ${#@} -eq 1 ]]; then
    case "$1" in
      -V|--version) git_sync_version && return 0 ;;
      -v|--verbose) GIT_SYNC_VERBOSE=1 ;;
      *) usage && return 1 ;;
    esac
  fi
  git_sync_update
}

git_sync_main "$@"

# git-sync
